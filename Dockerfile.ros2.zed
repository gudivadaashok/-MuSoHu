# MuSoHu with ZED Camera Support
# This Dockerfile extends the Stereolabs ZED base image with ROS 2 and all MuSoHu sensors
# 
# Build: docker build -t musohu-zed:v1 -f Dockerfile.ros2.zed .
# Run: See docker-compose.zed.yml or docs/ZED_INSTALLATION.md

FROM stereolabs/zed:4.1-gl-devel-cuda12.1-ubuntu22.04

# Install VNC and desktop environment
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
    tigervnc-standalone-server \
    tigervnc-common \
    xfce4 \
    xfce4-goodies \
    dbus-x11 \
    x11-xserver-utils \
    supervisor \
    net-tools \
    novnc \
    websockify \
    && rm -rf /var/lib/apt/lists/*

# Install ROS 2 Humble
RUN apt-get update && apt-get install -y \
    software-properties-common \
    curl \
    gnupg2 \
    lsb-release && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update && \
    apt-get install -y \
    ros-humble-desktop \
    ros-humble-image-transport \
    ros-humble-image-transport-plugins \
    ros-humble-diagnostic-updater \
    ros-humble-xacro \
    ros-humble-tf-transformations \
    python3-colcon-common-extensions \
    python3-rosdep \
    python3-transforms3d \
    && rm -rf /var/lib/apt/lists/*

# Install audio, LiDAR, and sensor dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    portaudio19-dev \
    libasound2-dev \
    libportaudio2 \
    libportaudiocpp0 \
    ffmpeg \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-tools \
    python3-pip \
    python3-gst-1.0 \
    libyaml-cpp-dev \
    libpcap-dev \
    libasio-dev \
    git \
    wget \
    && apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Install Python audio packages
RUN pip3 install --upgrade pip && \
    pip3 install --no-cache-dir pyusb click pixel-ring spidev pyaudio

# Initialize rosdep
RUN rosdep init || true
RUN rosdep update

# Clone diagnostic_updater from source
RUN mkdir -p /tmp/ros2_deps/src && cd /tmp/ros2_deps/src && \
    git clone https://github.com/ros/diagnostics.git && \
    cd /tmp/ros2_deps && \
    /bin/bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install" && \
    rm -rf /tmp/ros2_deps/src /tmp/ros2_deps/build /tmp/ros2_deps/log

# Set up workspace for all sensors
RUN mkdir -p /home/ubuntu/ros2_ws/src
WORKDIR /home/ubuntu/ros2_ws/src

# Clone audio_common for ROS2
RUN git clone -b ros2 https://github.com/ros-drivers/audio_common.git

# Clone respeaker_ros
RUN git clone https://github.com/hcrlab/respeaker_ros.git

# Clone RoboSense LiDAR SDK and message definitions
RUN git clone https://github.com/RoboSense-LiDAR/rslidar_sdk.git && \
    cd rslidar_sdk && \
    git submodule init && \
    git submodule update

# Clone RoboSense LiDAR ROS2 message definitions
RUN git clone https://github.com/RoboSense-LiDAR/rslidar_msg.git

# Clone Witmotion IMU ROS2 driver
RUN git clone https://github.com/ioio2995/witmotion_ros2.git

# Clone ZED ROS2 Wrapper
RUN git clone --recursive https://github.com/stereolabs/zed-ros2-wrapper.git

# Build the workspace
WORKDIR /home/ubuntu/ros2_ws

# Configure LiDAR type to RSHELIOS
RUN sed -i 's/lidar_type: RSM1/lidar_type: RSHELIOS/' /home/ubuntu/ros2_ws/src/rslidar_sdk/config/config.yaml

# Configure Witmotion IMU serial port
RUN sed -i 's|/dev/ttyUSB1|/dev/ttyUSB0|' /home/ubuntu/ros2_ws/src/witmotion_ros2/config/witmotion.yaml

# Copy udev rules for ReSpeaker
RUN cp /home/ubuntu/ros2_ws/src/respeaker_ros/config/*.rules /etc/udev/rules.d/ || true

# Install dependencies
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && \
    source /tmp/ros2_deps/install/setup.bash && \
    rosdep install --from-paths src --ignore-src -r -y"

# Build all packages
RUN /bin/bash -c "source /opt/ros/humble/setup.bash && \
    source /tmp/ros2_deps/install/setup.bash && \
    colcon build --symlink-install --cmake-args=-DCMAKE_BUILD_TYPE=Release \
    --packages-select audio_common_msgs respeaker_ros audio_capture audio_play \
    rslidar_msg rslidar_sdk witmotion_ros2 zed_wrapper zed_components \
    --parallel-workers $(nproc) || \
    colcon build --symlink-install --cmake-args=-DCMAKE_BUILD_TYPE=Release \
    --parallel-workers $(nproc)"

# Source the workspace in bashrc
RUN echo "source /opt/ros/humble/setup.bash" >> /home/ubuntu/.bashrc && \
    echo "source /tmp/ros2_deps/install/setup.bash" >> /home/ubuntu/.bashrc && \
    echo "source /home/ubuntu/ros2_ws/install/setup.bash" >> /home/ubuntu/.bashrc

# Copy supervisor config for ROS2 sensor nodes
COPY scripts/ros2-sensors.conf /etc/supervisor/conf.d/ros2-sensors.conf

# Copy helper scripts
COPY scripts/vnc-startup.sh /usr/local/bin/vnc-startup.sh
COPY scripts/check-sensors.sh /usr/local/bin/check-sensors.sh
COPY scripts/launch-rviz.sh /usr/local/bin/launch-rviz.sh
COPY scripts/launch-zed.sh /usr/local/bin/launch-zed.sh
RUN chmod +x /usr/local/bin/vnc-startup.sh \
             /usr/local/bin/check-sensors.sh \
             /usr/local/bin/launch-rviz.sh \
             /usr/local/bin/launch-zed.sh

# Copy RViz configuration
COPY scripts/musohu_sensors.rviz /usr/local/share/musohu_sensors.rviz

# Set up VNC
RUN mkdir -p /home/ubuntu/.vnc
RUN echo "ubuntu" | vncpasswd -f > /home/ubuntu/.vnc/passwd
RUN chmod 600 /home/ubuntu/.vnc/passwd

# Configure VNC startup
RUN echo "#!/bin/bash" > /home/ubuntu/.vnc/xstartup && \
    echo "startxfce4 &" >> /home/ubuntu/.vnc/xstartup && \
    chmod +x /home/ubuntu/.vnc/xstartup

# Expose ports
EXPOSE 80 5901 6699/udp 7788/udp

# Set environment variables
ENV DISPLAY=:1
ENV VNC_PASSWORD=ubuntu
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=all

# Set working directory
WORKDIR /workspace

# Start supervisor and VNC
CMD ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisor/supervisord.conf"]
